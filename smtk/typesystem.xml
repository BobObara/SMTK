<?xml version="1.0"?>
<typesystem package="@TYPESYSTEM_NAME@">

  <suppress-warning text="template baseclass 'std::shared_ptr&lt;*&gt;' of 'ptr' is not known"/>

  <!-- Ignore some namespaces -->
  <suppress-warning text="namespace 'std' does not have a type entry"/>
  <suppress-warning text="namespace 'pugi' does not have a type entry"/>
	<suppress-warning text="namespace 'smtk::internal' does not have a type entry"/>
  <suppress-warning text="namespace 'mpl_' does not have a type entry"/>
  <suppress-warning text="namespace 'boost' does not have a type entry"/>

  <!-- Suppressed because they are memory varables-->
  <suppress-warning text="skipping field 'Manager::m_refModel' with unmatched type 'smtk::weak_ptr&lt;smtk::model::Model&gt;'"/>
  <suppress-warning text="skipping field 'Item::m_definition' with unmatched type 'smtk::shared_ptr&lt;const smtk::attribute::ItemDefinition&gt;'"/>
  <suppress-warning text="skipping field 'Manager::m_derivedDefInfo' with unmatched type 'std::map&lt;smtk::attribute::DefinitionPtr,smtk::attribute::WeakDefinitionPtrSet&gt;'"/>
  <suppress-warning text="skipping field 'RefItem::m_values' with unmatched type 'std::vector&lt;attribute::WeakAttributePtr&gt;'"/>
  <suppress-warning text="skipping field 'RefItemDefinition::m_definition' with unmatched type 'smtk::weak_ptr&lt;smtk::attribute::Definition&gt;'"/>

  <!-- Suppressed because they are templated functions -->
  <suppress-warning text="skipping function 'smtk::view::Group::addSubView', unmatched return type 'smtk::internal::shared_ptr_type&lt;T&gt;::SharedPointerType'"/>
  <suppress-warning text="skipping function 'smtk::attribute::GroupItemDefinition::addItemDefinition', unmatched return type 'smtk::internal::shared_ptr_type&lt;T&gt;::SharedPointerType'"/>
  <suppress-warning text="skipping function 'smtk::dynamicCastPointer', unmatched return type 'smtk::shared_ptr&lt;T&gt;'"/>
  <suppress-warning text="skipping function 'smtk::attribute::Definition::addItemDefinition', unmatched return type 'smtk::internal::shared_ptr_type&lt;T&gt;::SharedPointerType'"/>

  <!-- Return a list.  For now we will ingore the iterators-->
  <suppress-warning text="skipping function 'smtk::model::Item::beginAssociatedAttributes', unmatched return type 'smtk::model::Item::const_iterator'"/>
  <suppress-warning text="skipping function 'smtk::model::Item::endAssociatedAttributes', unmatched return type 'smtk::model::Item::const_iterator'"/>
  <suppress-warning text="skipping function 'smtk::attribute::Attribute::associatedEntities', unmatched return type 'std::set&lt;smtk::model::ItemPtr&gt;::const_iterator'"/>
  <suppress-warning text="skipping function 'smtk::model::Model::beginItemIterator', unmatched return type 'smtk::model::Model::const_iterator'"/>
  <suppress-warning text="skipping function 'smtk::model::Model::endItemIterator', unmatched return type 'smtk::model::Model::const_iterator'"/>
  <suppress-warning text="skipping function 'smtk::model::ModelBody::SetTessellation', unmatched return type 'smtk::model::ModelBody::geom_iter_type'"/>
  <suppress-warning text="skipping function 'smtk::model::BRepModel::InsertLink', unmatched return type 'smtk::model::BRepModel&lt;UUID,UUIDs,Link&gt;::iter_type'"/>
  <suppress-warning text="skipping function 'smtk::model::BRepModel::InsertLinkOfTypeAndDimension', unmatched return type 'smtk::model::BRepModel&lt;UUID,UUIDs,Link&gt;::iter_type'"/>
  <suppress-warning text="skipping function 'smtk::model::BRepModel::SetLink', unmatched return type 'smtk::model::BRepModel&lt;UUID,UUIDs,Link&gt;::iter_type'"/>
  <suppress-warning text="skipping function 'smtk::model::BRepModel::SetLinkOfTypeAndDimension', unmatched return type 'smtk::model::BRepModel&lt;UUID,UUIDs,Link&gt;::iter_type'"/>
  <suppress-warning text="skipping function 'smtk::model::BRepModel::SetCellOfDimension', unmatched return type 'smtk::model::BRepModel&lt;UUID,UUIDs,Link&gt;::iter_type'"/>
  <suppress-warning text="skipping function 'smtk::model::BRepModel::InsertCellOfDimension', unmatched return type 'smtk::model::BRepModel&lt;UUID,UUIDs,Link&gt;::iter_type'"/>
  <suppress-warning text="skipping function 'smtk::model::BRepModel::InsertLink', unmatched return type 'BRepModel::iter_type'"/>
	<suppress-warning text="skipping function 'smtk::model::BRepModel::InsertLinkOfTypeAndDimension', unmatched return type 'BRepModel::iter_type'"/>
	<suppress-warning text="skipping function 'smtk::model::BRepModel::SetLink', unmatched return type 'BRepModel::iter_type'"/>
	<suppress-warning text="skipping function 'smtk::model::BRepModel::SetLinkOfTypeAndDimension', unmatched return type 'BRepModel::iter_type'"/>

  <!-- Ignore warnings from protected functions -->
  <suppress-warning text="skipping function 'smtk::model::BRepModel::InsertLinkReferences', unmatched parameter type 'smtk::model::UUIDWithLink const&amp;'"/>
	<suppress-warning text="skipping function 'smtk::model::BRepModel::RemoveLinkReferences', unmatched parameter type 'smtk::model::UUIDWithLink const&amp;'"/>

  <!-- do not support input or output streams-->
  <suppress-warning text="skipping function 'smtk::util::operator&lt;&lt;', unmatched return type 'std::ostream&amp;'"/>
  <suppress-warning text="skipping function 'smtk::util::operator&gt;&gt;', unmatched return type 'std::istream&amp;'"/>

  <!-- Constructor given raw pointers -->
  <suppress-warning text="skipping function 'smtk::model::ModelBody::ModelBody', unmatched parameter type 'smtk::model::UUIDsToLinks*'"/>

  @EXTRA_TYPESYSTEMS@

  <primitive-type name="bool"/>
  <primitive-type name="double"/>
  <primitive-type name="real"/>
  <primitive-type name="int"/>
  <primitive-type name="short"/>
  <primitive-type name="unsigned short"/>
  <primitive-type name="ushort"/>
  <primitive-type name="unsigned int" />
  <primitive-type name="signed int" />
  <primitive-type name="char"/>
  <primitive-type name="unsigned char"/>
  <primitive-type name="long"/>
  <primitive-type name="unsigned long"/>
  <primitive-type name="long long"/>
  <primitive-type name="unsigned long long"/>

  <primitive-type name="std::size_t"/>
  <primitive-type name="std::string"/>
  <primitive-type name="smtk::util::UUID" target-lang-api-name="PyObject">
    <include file-name="smtk/util/UUID.h" location="global"/>

    <conversion-rule>
      <native-to-target>
        // Get the uuid module object
        PyObject* module = PyImport_ImportModule("uuid");
        // Call the class inside the module to create an instance
        unsigned char* data = %in.Begin();
        PyObject* byteStr =
          Py_BuildValue("s#", data, %in.Size());
        PyObject* none = Py_None;
        char v_uuid[]="UUID";
        char v_00[]="OO";
        PyObject* %out = PyObject_CallMethod(module, v_uuid, v_00, none, byteStr);
        // FIXME: This hardly seems wise, but http://docs.python.org/2/c-api/none.html
        //        says Py_None is reference-counted:
        Py_DECREF(none);
        Py_DECREF(byteStr);
        return %out;
      </native-to-target>
      <target-to-native>
        <!-- The 'check' attribute can be derived from the 'type' attribute,
             it is defined here to test the CHECKTYPE type system variable. -->
        <add-conversion type="PyObject" check="%CHECKTYPE[smtk::util::UUID](%in)">
          PyObject* uuidBytes = PyObject_GetAttrString(%in, "bytes");
          char* ustr = uuidBytes ? PyString_AsString(uuidBytes) : NULL;
          if (ustr) {
            for (int i = 0; i &lt; 16; ++i)
              *((%out).Begin() + i) = ustr[i];
          }
        </add-conversion>
      </target-to-native>
    </conversion-rule>
  </primitive-type>

  <container-type name="std::pair" type="pair">
    <include file-name="utility" location="global"/>
    <conversion-rule>
      <native-to-target>
        PyObject* %out = PyTuple_New(2);
        PyTuple_SET_ITEM(%out, 0, %CONVERTTOPYTHON[%INTYPE_0](%in.first));
        PyTuple_SET_ITEM(%out, 1, %CONVERTTOPYTHON[%INTYPE_1](%in.second));
        return %out;
      </native-to-target>
      <target-to-native>
        <add-conversion type="PySequence">
          %out.first = %CONVERTTOCPP[%OUTTYPE_0](PySequence_Fast_GET_ITEM(%in, 0));
          %out.second = %CONVERTTOCPP[%OUTTYPE_1](PySequence_Fast_GET_ITEM(%in, 1));
        </add-conversion>
      </target-to-native>
    </conversion-rule>
  </container-type>

  <template name="cpplist_to_pylist_convertion">
    PyObject* %out = PyList_New((int) %in.size());
    %INTYPE::const_iterator it = %in.begin();
    for (int idx = 0; it != %in.end(); ++it, ++idx) {
    %INTYPE_0 cppItem(*it);
    PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
    }
    return %out;
  </template>

  <template name="pyseq_to_cpplist_convertion">
    Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
    for (int i = 0; i != PySequence_Fast_GET_SIZE(seq.object()); i++) {
    PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), i);
    %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
    %out.push_back(cppItem);
    }
  </template>

  <!-- Code to allow us to wrap std::lists -->
  <container-type name="std::list" type="list">
    <include file-name="list" location="global"/>
    <conversion-rule>
      <native-to-target>
        PyObject* %out = PyList_New((int) %in.size());
        %INTYPE::const_iterator it = %in.begin();
        for (int idx = 0; it != %in.end(); ++it, ++idx) {
        %INTYPE_0 cppItem(*it);
        PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
        }
        return %out;
      </native-to-target>
      <target-to-native>
        <add-conversion type="PySequence">
          Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
          for (int i = 0; i != PySequence_Fast_GET_SIZE(seq.object()); i++) {
          PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), i);
          %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
          %out.push_back(cppItem);
          }
        </add-conversion>
      </target-to-native>
    </conversion-rule>
  </container-type>

  <!-- Code to allow us to wrap std::vectors -->
  <container-type name="std::vector" type="vector">
    <include file-name="vector" location="global"/>
    <conversion-rule>
      <native-to-target>
        %INTYPE::size_type vectorSize = %in.size();
        PyObject* %out = PyList_New((int) vectorSize);
        for (%INTYPE::size_type idx = 0; idx != vectorSize; ++idx) {
        %INTYPE_0 cppItem(%in[idx]);
        PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
        }
        return %out;
      </native-to-target>
      <target-to-native>
        <add-conversion type="PySequence">
          Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
          int vectorSize = PySequence_Fast_GET_SIZE(seq.object());
          %out.reserve(vectorSize);
          for (int idx = 0; idx != vectorSize; ++idx ) {
          PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), idx);
          %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
          %out.push_back(cppItem);
          }
        </add-conversion>
      </target-to-native>
    </conversion-rule>
  </container-type>

  <container-type name="std::map" type="map">
    <include file-name="map" location="global"/>
    <conversion-rule>
      <native-to-target>
        PyObject* %out = PyDict_New();
        %INTYPE::const_iterator it = %in.begin();
        for (; it != %in.end(); ++it) {
        %INTYPE_0 key = it->first;
        %INTYPE_1 value = it->second;
        PyDict_SetItem(%out,
        %CONVERTTOPYTHON[%INTYPE_0](key),
        %CONVERTTOPYTHON[%INTYPE_1](value));
        }
        return %out;
      </native-to-target>
      <target-to-native>
        <add-conversion type="PyDict">
          PyObject* key;
          PyObject* value;
          Py_ssize_t pos = 0;
          while (PyDict_Next(%in, &amp;pos, &amp;key, &amp;value)) {
          %OUTTYPE_0 cppKey = %CONVERTTOCPP[%OUTTYPE_0](key);
          %OUTTYPE_1 cppValue = %CONVERTTOCPP[%OUTTYPE_1](value);
          %out.insert(%OUTTYPE::value_type(cppKey, cppValue));
          }
        </add-conversion>
      </target-to-native>
    </conversion-rule>
  </container-type>

 <container-type name="std::set" type="set">
    <include file-name="set" location="global"/>

    <conversion-rule>

      <native-to-target>
      PyObject* %out = PySet_New(0);
      %INTYPE::const_iterator it;
      for (it = %in.begin(); it != %in.end(); ++it) {
        %INTYPE_0 value = *it;
        PyObject* pyValue = %CONVERTTOPYTHON[%INTYPE_0](value);
        PySet_Add(%out, pyValue);
      }
      return %out;
      </native-to-target>

      <target-to-native>

        <add-conversion type="PySet">
        Shiboken::AutoDecRef iter(PyObject_GetIter(%in));
        if (iter.object()) {
          PyObject* item;
          while ((item = PyIter_Next(iter))) {
            %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](item);
            %out.insert(cppItem);
            Py_DECREF(item);
          }
        }
        </add-conversion>

        <add-conversion type="PySequence">
        Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
        Py_ssize_t vectorSize = PySequence_Fast_GET_SIZE(seq.object());
        for (Py_ssize_t idx = 0; idx &lt; vectorSize; ++idx) {
          PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), idx);
          %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
          %out.insert(cppItem);
        }
        </add-conversion>

      </target-to-native>

    </conversion-rule>
  </container-type>


  <!-- setup the shared pointer type outside the namespaces -->
  <type-template name="smtk::shared_ptr">
    <include file-name="memory" location="global"/>
    <arg wraps-pointer-as="%CPPSELF-&gt;get()"/>
  </type-template>

  <value-type template="smtk::shared_ptr" args="const smtk::attribute::Definition">
    <modify-function signature="addItemDefinition(smtk::shared_ptr&lt; smtk::attribute::ItemDefinition &gt; )" remove="all"/>
    <modify-function signature="setAdvanceLevel(int)" remove="all"/>
    <modify-function signature="setAssociationMask(unsigned long)" remove="all"/>
    <modify-function signature="setDefaultColor(const double *)" remove="all"/>
    <modify-function signature="setDefaultColor(double, double, double, double)" remove="all"/>
    <modify-function signature="unsetNotApplicableColor()" remove="all"/>
    <modify-function signature="unsetDefaultColor()" remove="all"/>
    <modify-function signature="setVersion(int)" remove="all"/>
    <modify-function signature="setNotApplicableColor(const double *)" remove="all"/>
    <modify-function signature="setNotApplicableColor(double, double, double, double)" remove="all"/>
    <modify-function signature="setIsUnique(bool)" remove="all"/>
    <modify-function signature="setIsNodal(bool)" remove="all"/>
    <modify-function signature="setIsAbstract(bool)" remove="all"/>
    <modify-function signature="setBriefDescription(const std::string &amp;)" remove="all"/>
    <modify-function signature="setDetailedDescription(const std::string &amp;)" remove="all"/>
    <modify-function signature="setLabel(const std::string &amp;)" remove="all"/>
  </value-type>

  <value-type template="smtk::shared_ptr" args="const smtk::attribute::Item">
    <modify-function signature="setUserData(const std::string &amp;, smtk::shared_ptr&lt; smtk::util::UserData &gt; )"  remove="all"/>
    <modify-function signature="reset()" remove="all"/>
    <modify-function signature="detachOwningItem()" remove="all"/>
    <modify-function signature="detachOwningAttribute()" remove="all"/>
    <modify-function signature="clearUserData(const std::string &amp;)" remove="all"/>
    <modify-function signature="clearAllUserData()" remove="all"/>
    <modify-function signature="setIsEnabled(bool)" remove="all"/>
  </value-type>

  <value-type template="smtk::shared_ptr" args="const smtk::attribute::ItemDefinition" >
    <modify-function signature="setAdvanceLevel(int)" remove="all"/>
    <modify-function signature="setVersion(int)" remove="all"/>
    <modify-function signature="setBriefDescription(const std::string &amp;)" remove="all"/>
    <modify-function signature="setDetailedDescription(const std::string &amp;)" remove="all"/>
    <modify-function signature="setLabel(const std::string &amp;)" remove="all"/>
    <modify-function signature="setVersion(int)" remove="all"/>
    <modify-function signature="setIsOptional(bool)" remove="all"/>
    <modify-function signature="setIsEnabledByDefault(bool)" remove="all"/>
    <modify-function signature="addCategory(const std::string &amp;)" remove="all"/>
    <modify-function signature="removeCategory(const std::string &amp;)" remove="all"/>
  </value-type>

  <value-type template="smtk::shared_ptr" args="smtk::model::Item"/>
  <value-type template="smtk::shared_ptr" args="smtk::model::Model"/>
  <value-type template="smtk::shared_ptr" args="smtk::model::ModelBody">
    <modify-function signature="ArrangeLink(smtk::util::UUID,smtk::model::ArrangementKind,smtk::model::Arrangement,int)">
      <inject-code class="target" position="beginning">
        %RETURN_TYPE result = %CPPSELF->get()->ArrangeLink(%1,%2,*%3,%4);
        %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](result);
      </inject-code>
    </modify-function>
    <add-function signature="SetTessellation(smtk::util::UUID&amp;,smtk::model::Tessellation&amp;)"
      static="NO"
      return-type="std::pair&lt;smtk::util::UUID,smtk::model::Tessellation&gt;">
      <inject-code>
        smtk::model::ModelBody::geom_iter_type i = %CPPSELF-&gt;get()-&gt;SetTessellation(%1, %2);
        %RETURN_TYPE %0 = *i;
        %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
      </inject-code>
    </add-function>
    <add-function signature="Topology()"
      return-type="std::map&lt;smtk::util::UUID,smtk::model::Link&gt;">
      <inject-code class="target" position="beginning">
        %RETURN_TYPE %0 = %CPPSELF-&gt;get()-&gt;topology();
        %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
      </inject-code>
    </add-function>
    <add-function signature="InsertLinkOfTypeAndDimension(int, int)"
      static="NO"
      return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
      <inject-code class="target" position="beginning">
        %RETURN_TYPE %0 = *(%CPPSELF-&gt;get()-&gt;InsertLinkOfTypeAndDimension(%1,%2));
        %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
      </inject-code>
    </add-function>
    <add-function signature="InsertLink(smtk::model::Link&amp;)"
      static="NO"
      return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
      <inject-code class="target" position="beginning">
        %RETURN_TYPE %0 = *(%CPPSELF-&gt;get()-&gt;InsertLink(%1));
        %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
      </inject-code>
    </add-function>
    <add-function signature="SetLinkOfTypeAndDimension(const smtk::util::UUID&amp;, int, int)"
      static="NO"
      return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
      <inject-code class="target" position="beginning">
        %RETURN_TYPE %0 = *(%CPPSELF-&gt;get()-&gt;SetLinkOfTypeAndDimension(%1,%2,%3));
        %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
      </inject-code>
    </add-function>
    <add-function signature="SetLink(const smtk::util::UUID&amp;, smtk::model::Link&amp;)"
      static="NO"
      return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
      <inject-code class="target" position="beginning">
        %RETURN_TYPE %0 = *(%CPPSELF-&gt;get()-&gt;SetLink(%1,%2));
        %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
      </inject-code>
    </add-function>
    <add-function signature="InsertCellOfDimension(int)"
      static="NO"
      return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
      <inject-code class="target" position="beginning">
        %RETURN_TYPE %0 = *(%CPPSELF-&gt;get()-&gt;InsertCellOfDimension(%1));
        %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
      </inject-code>
    </add-function>
    <add-function signature="SetCellOfDimension(const smtk::util::UUID&amp;, int)"
      static="NO"
      return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
      <inject-code class="target" position="beginning">
        %RETURN_TYPE %0 = *(%CPPSELF-&gt;get()-&gt;SetCellOfDimension(%1,%2));
        %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
      </inject-code>
    </add-function>
  </value-type>
  <value-type template="smtk::shared_ptr" args="smtk::model::GroupItem"/>
  <value-type template="smtk::shared_ptr" args="smtk::model::GridInfo"/>
  <value-type template="smtk::shared_ptr" args="smtk::model::GridInfo2D"/>
  <value-type template="smtk::shared_ptr" args="smtk::model::GridInfo3D"/>

  <value-type template="smtk::shared_ptr" args="smtk::attribute::Attribute">
    <modify-function signature="find(const std::string &amp;)">
      <modify-argument index="return">
        <replace-type modified-type="smtk::shared_ptr&lt; smtk::attribute::Item &gt;" />
      </modify-argument>
      <inject-code class="target" position="beginning">
        smtk::shared_ptr&lt; smtk::attribute::Item &gt; result = %CPPSELF->get()->find(%1);
        %PYARG_0 = %CONVERTTOPYTHON[ smtk::shared_ptr&lt; smtk::attribute::Item &gt; ](result);
      </inject-code>
    </modify-function>
    <modify-function signature="references(std::vector&lt;smtk::shared_ptr&lt;smtk::attribute::Item &gt; &gt;&amp;)">
      <modify-argument index="1">
        <remove-argument />
      </modify-argument>
      <modify-argument index="return">
        <replace-type modified-type="std::vector&lt;smtk::shared_ptr&lt;smtk::attribute::Item &gt; &gt;" />
      </modify-argument>
      <inject-code class="target" position="beginning">
        std::vector&lt;smtk::shared_ptr&lt;smtk::attribute::Item &gt; &gt; _out;
        %CPPSELF->get()->references(_out);
        %PYARG_0 = %CONVERTTOPYTHON[std::vector&lt;smtk::shared_ptr&lt;smtk::attribute::Item &gt; &gt;](_out);
      </inject-code>
    </modify-function>
  </value-type>

  <value-type template="smtk::shared_ptr" args="smtk::attribute::Definition" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::RefItem" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::RefItemDefinition" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::Item" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::ItemDefinition" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::ValueItem" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::ValueItemDefinition" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::DirectoryItem" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::DirectoryItemDefinition" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::DoubleItem" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::DoubleItemDefinition" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::FileItem" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::FileItemDefinition" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::GroupItem">
    <modify-function signature="find(const std::string &amp;)">
      <modify-argument index="return">
        <replace-type modified-type="smtk::shared_ptr&lt; smtk::attribute::Item &gt;" />
      </modify-argument>
      <inject-code class="target" position="beginning">
        smtk::shared_ptr&lt; smtk::attribute::Item &gt; result = %CPPSELF-&gt;get()->find(%1);
        %PYARG_0 = %CONVERTTOPYTHON[ smtk::shared_ptr&lt; smtk::attribute::Item &gt; ](result);
      </inject-code>
    </modify-function>
  </value-type>
  <value-type template="smtk::shared_ptr" args="smtk::attribute::GroupItemDefinition" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::IntItem" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::IntItemDefinition" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::StringItem" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::StringItemDefinition" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::VoidItem" />
  <value-type template="smtk::shared_ptr" args="smtk::attribute::VoidItemDefinition" />
  <!--value-type template="smtk::shared_ptr" args="smtk::attribute::Manager" >
    <modify-function signature="findAttributes(std::string)" remove="all"/>
  </value-type-->

  <value-type template="smtk::shared_ptr" args="smtk::view::Base" />

  <value-type template="smtk::shared_ptr" args="smtk::view::Attribute" />

  <value-type template="smtk::shared_ptr" args="smtk::view::Group" />
  <value-type template="smtk::shared_ptr" args="smtk::view::Instanced" />
  <value-type template="smtk::shared_ptr" args="smtk::view::ModelEntity" />
  <value-type template="smtk::shared_ptr" args="smtk::view::Root" />
  <value-type template="smtk::shared_ptr" args="smtk::view::SimpleExpression" />

  <value-type template="smtk::shared_ptr" args="smtk::util::UserData" />

  <namespace-type name="smtk">
    <namespace-type name="model">
      <!-- setup the model classes -->
      <object-type name="BRepModel">
        <include file-name="smtk/model/BRepModel.h" location="local"/>
      </object-type>

      <enum-type name="ArrangementKind">
        <include file-name="smtk/model/Arrangement.h" location="local"/>
      </enum-type>

      <enum-type name="EntityTypeBits">
        <include file-name="smtk/model/Link.h" location="local"/>
      </enum-type>

      <object-type name="Link">
        <include file-name="smtk/model/Link.h" location="local"/>
      </object-type>

      <object-type name="Arrangement">
        <include file-name="smtk/model/Arrangement.h" location="local"/>
      </object-type>

      <object-type name="Tessellation">
        <include file-name="smtk/model/Tessellation.h" location="local"/>
        <modify-function signature="AddCoords(double*)" remove="all"/>
        <modify-function signature="AddPoint(double*)" remove="all"/>
        <modify-function signature="AddLine(double *, double *)" remove="all"/>
        <modify-function signature="AddTriangle(double*, double*, double*)" remove="all"/>
      </object-type>

      <object-type name="Item">
        <include file-name="smtk/model/Item.h" location="local"/>
        <enum-type name="Type"/>
      </object-type>

      <object-type name="GroupItem">
        <include file-name="smtk/model/GroupItem.h" location="local"/>
      </object-type>

      <object-type name="ModelDomainItem">
        <include file-name="smtk/model/ModelDomainItem.h" location="local"/>
      </object-type>

      <object-type name="Model">
        <include file-name="smtk/model/Model.h" location="local"/>
        <enum-type name="ModelEntityNodalTypes"/>
      </object-type>

      <object-type name="ModelBody">
        <include file-name="smtk/model/ModelBody.h" location="local"/>
        <add-function signature="SetTessellation(smtk::util::UUID&amp;,smtk::model::Tessellation&amp;)"
          static="NO"
          return-type="std::pair&lt;smtk::util::UUID,smtk::model::Tessellation&gt;">
          <inject-code>
            smtk::model::ModelBody::geom_iter_type i = %CPPSELF-&gt;SetTessellation(%1, %2);
            %RETURN_TYPE %0 = *i;
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <modify-function signature="topology() const" remove="all"/>
        <modify-function signature="topology()" remove="all"/>
        <add-function signature="Topology()"
          return-type="std::map&lt;smtk::util::UUID,smtk::model::Link&gt;">
          <inject-code class="target" position="beginning">
            %RETURN_TYPE %0 = %CPPSELF-&gt;topology();
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="InsertLinkOfTypeAndDimension(int, int)"
          static="NO"
          return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
          <inject-code class="target" position="beginning">
            %RETURN_TYPE %0 = *(%CPPSELF-&gt;InsertLinkOfTypeAndDimension(%1,%2));
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="InsertLink(smtk::model::Link&amp;)"
          static="NO"
          return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
          <inject-code class="target" position="beginning">
            %RETURN_TYPE %0 = *(%CPPSELF-&gt;InsertLink(%1));
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="SetLinkOfTypeAndDimension(const smtk::util::UUID&amp;, int, int)"
          static="NO"
          return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
          <inject-code class="target" position="beginning">
            %RETURN_TYPE %0 = *(%CPPSELF-&gt;SetLinkOfTypeAndDimension(%1,%2,%3));
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="SetLink(const smtk::util::UUID&amp;, smtk::model::Link&amp;)"
          static="NO"
          return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
          <inject-code class="target" position="beginning">
            %RETURN_TYPE %0 = *(%CPPSELF-&gt;SetLink(%1,%2));
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="InsertCellOfDimension(int)"
          static="NO"
          return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
          <inject-code class="target" position="beginning">
            %RETURN_TYPE %0 = *(%CPPSELF-&gt;InsertCellOfDimension(%1));
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="SetCellOfDimension(const smtk::util::UUID&amp;, int)"
          static="NO"
          return-type="std::pair&lt;smtk::util::UUID,smtk::model::Link&gt;">
          <inject-code class="target" position="beginning">
            %RETURN_TYPE %0 = *(%CPPSELF-&gt;SetCellOfDimension(%1,%2));
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="GridInfo">
        <include file-name="smtk/model/GridInfo.h" location="local"/>
      </object-type>

      <object-type name="GridInfo2D">
        <include file-name="smtk/model/GridInfo2D.h" location="local"/>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::model::GridInfo &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::model::GridInfo2D &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::model::GridInfo2D &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="GridInfo3D">
        <include file-name="smtk/model/GridInfo3D.h" location="local"/>
      </object-type>

    </namespace-type>

    <namespace-type name="attribute">
      <!-- setup the attribute classes -->
      <object-type name="Attribute">
        <include file-name="smtk/attribute/Attribute.h" location="local"/>
        <modify-function signature="references(std::vector&lt;smtk::shared_ptr&lt;smtk::attribute::Item &gt; &gt;&amp;) const">
          <modify-argument index="1">
            <remove-argument />
          </modify-argument>
          <modify-argument index="return">
            <replace-type modified-type="std::vector&lt;smtk::shared_ptr&lt;smtk::attribute::Item &gt; &gt;" />
          </modify-argument>
          <inject-code class="target" position="beginning">
            std::vector&lt;smtk::shared_ptr&lt;smtk::attribute::Item &gt; &gt; _out;
            %CPPSELF->references(_out);
            %PYARG_0 = %CONVERTTOPYTHON[std::vector&lt;smtk::shared_ptr&lt;smtk::attribute::Item &gt; &gt;](_out);
          </inject-code>
        </modify-function>
        <modify-function signature="setColor(const double *)" remove="all"/>
      </object-type>

      <object-type name="RefItem">
        <include file-name="smtk/attribute/RefItem.h" location="local"/>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::Item &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::RefItem &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::RefItem &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="RefItemDefinition">
        <include file-name="smtk/attribute/RefItemDefinition.h" location="local"/>
        <add-function signature="ToItemDefinition(const smtk::shared_ptr&lt;smtk::attribute::RefItemDefinition &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::RefItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::RefItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="Definition">
        <include file-name="smtk/attribute/Definition.h" location="local"/>
        <modify-function signature="setDefaultColor(const double *)" remove="all"/>
        <modify-function signature="setNotApplicableColor(const double *)" remove="all"/>
      </object-type>

      <object-type name="DirectoryItem">
        <include file-name="smtk/attribute/DirectoryItem.h" location="local"/>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::Item &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::DirectoryItem &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::DirectoryItem &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="DirectoryItemDefinition">
        <include file-name="smtk/attribute/DirectoryItemDefinition.h" location="local"/>
        <add-function signature="ToItemDefinition(const smtk::shared_ptr&lt;smtk::attribute::DirectoryItemDefinition &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt; &amp;)"
          static="yes"
          return-type="smtk::shared_ptr&lt;smtk::attribute::DirectoryItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::DirectoryItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="DoubleItem">
        <include file-name="smtk/attribute/DoubleItem.h" location="local"/>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::Item &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::DoubleItem &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::DoubleItem &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="DoubleItemDefinition">
        <include file-name="smtk/attribute/DoubleItemDefinition.h" location="local"/>
        <add-function signature="ToItemDefinition(const smtk::shared_ptr&lt;smtk::attribute::DoubleItemDefinition &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt; &amp;)"
          static="yes"
          return-type="smtk::shared_ptr&lt;smtk::attribute::DoubleItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::DoubleItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="FileItem">
        <include file-name="smtk/attribute/FileItem.h" location="local"/>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::Item &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::FileItem &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::FileItem &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="FileItemDefinition">
        <include file-name="smtk/attribute/FileItemDefinition.h" location="local"/>
        <add-function signature="ToItemDefinition(const smtk::shared_ptr&lt;smtk::attribute::FileItemDefinition &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt; &amp;)"
          static="yes"
          return-type="smtk::shared_ptr&lt;smtk::attribute::FileItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::FileItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="GroupItem">
        <include file-name="smtk/attribute/GroupItem.h" location="local"/>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::Item &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::GroupItem &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::GroupItem &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="GroupItemDefinition">
        <include file-name="smtk/attribute/GroupItemDefinition.h" location="local"/>
        <add-function signature="ToItemDefinition(const smtk::shared_ptr&lt;smtk::attribute::GroupItemDefinition &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
         </add-function>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::GroupItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::GroupItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="IntItem">
        <include file-name="smtk/attribute/IntItem.h" location="local"/>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::Item &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::IntItem &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::IntItem &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="IntItemDefinition">
        <include file-name="smtk/attribute/IntItemDefinition.h" location="local"/>
        <add-function signature="ToItemDefinition(const smtk::shared_ptr&lt;smtk::attribute::IntItemDefinition &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::IntItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::IntItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="Item">
        <include file-name="smtk/attribute/Item.h" location="local"/>
        <enum-type name="Type"/>
      </object-type>

      <object-type name="ItemDefinition">
        <include file-name="smtk/attribute/ItemDefinition.h" location="local" />
      </object-type>

      <object-type name="Manager">
        <include file-name="smtk/attribute/Manager.h" location="local" />

        <modify-function signature="findAttributes(std::string, std::vector&lt; smtk::shared_ptr&lt; smtk::attribute::Attribute &gt; &gt;&amp;) const">
          <modify-argument index="2">
            <remove-argument />
          </modify-argument>
          <modify-argument index="return">
            <replace-type modified-type="std::vector&lt; smtk::shared_ptr&lt; smtk::attribute::Attribute &gt; &gt;" />
          </modify-argument>
          <inject-code class="target" position="beginning">
            std::vector&lt; smtk::shared_ptr&lt; smtk::attribute::Attribute &gt; &gt; _out;
            %CPPSELF->findAttributes(%1, _out);
            %PYARG_0 = %CONVERTTOPYTHON[std::vector&lt; smtk::shared_ptr&lt; smtk::attribute::Attribute &gt; &gt;](_out);
          </inject-code>
        </modify-function>

        <modify-function signature="findAttributes(smtk::shared_ptr&lt; smtk::attribute::Definition &gt;, std::vector&lt; smtk::shared_ptr&lt; smtk::attribute::Attribute &gt; &gt;&amp;) const">
          <modify-argument index="2">
            <remove-argument />
          </modify-argument>
          <modify-argument index="return">
            <replace-type modified-type="std::vector&lt; smtk::shared_ptr&lt; smtk::attribute::Attribute &gt; &gt;" />
          </modify-argument>
          <inject-code class="target" position="beginning">
            std::vector&lt; smtk::shared_ptr&lt; smtk::attribute::Attribute &gt; &gt; _out;
            %CPPSELF->findAttributes(%1, _out);
            %PYARG_0 = %CONVERTTOPYTHON[std::vector&lt; smtk::shared_ptr&lt; smtk::attribute::Attribute &gt; &gt;](_out);
          </inject-code>
        </modify-function>

     </object-type>

      <object-type name="StringItem">
        <include file-name="smtk/attribute/StringItem.h" location="local" />
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::Item &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::StringItem &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::StringItem &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="StringItemDefinition">
        <include file-name="smtk/attribute/StringItemDefinition.h" location="local" />
        <add-function signature="ToItemDefinition(const smtk::shared_ptr&lt;smtk::attribute::StringItemDefinition &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::StringItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::StringItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="ValueItem">
        <include file-name="smtk/attribute/ValueItem.h" location="local" />
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::Item &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::ValueItem &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ValueItem &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="ValueItemDefinition">
        <include file-name="smtk/attribute/ValueItemDefinition.h" location="local" />
        <add-function signature="ToItemDefinition(const smtk::shared_ptr&lt;smtk::attribute::ValueItemDefinition &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt; &amp;)"
          static="yes"
          return-type="smtk::shared_ptr&lt;smtk::attribute::ValueItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ValueItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="VoidItem">
        <include file-name="smtk/attribute/VoidItem.h" location="local" />
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::Item &gt; &amp;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::VoidItem &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::VoidItem &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="VoidItemDefinition">
        <include file-name="smtk/attribute/VoidItemDefinition.h" location="local" />
        <add-function signature="ToItemDefinition(const smtk::shared_ptr&lt;smtk::attribute::VoidItemDefinition &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::ItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
        <add-function signature="CastTo(smtk::shared_ptr&lt;smtk::attribute::ItemDefinition &gt; &amp;)"
          static="yes"
          return-type="smtk::shared_ptr&lt;smtk::attribute::VoidItemDefinition &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::attribute::VoidItemDefinition &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <value-type name="ValueItemTemplate" generate="no" />
      <value-type name="ValueItemDefinitionTemplate" generate="no" />

    </namespace-type>

    <namespace-type name="util">
      <!-- setup the util classes -->
     <object-type name="AttributeReader">
        <include file-name="smtk/util/AttributeReader.h" location="local"/>
      </object-type>

      <object-type name="AttributeWriter">
        <include file-name="smtk/util/AttributeWriter.h" location="local"/>
      </object-type>

      <object-type name="Logger">
        <include file-name="smtk/util/Logger.h" location="local"/>
        <enum-type name="Severity"/>
        <object-type name="Record" />
      </object-type>

      <object-type name="UserData">
        <include file-name="smtk/util/UserData.h" location="local" />
      </object-type>

    </namespace-type>

    <namespace-type name="view">
      <!-- setup the view classes -->

      <object-type name="Base">
        <include file-name="smtk/view/Base.h" location="local" />
        <enum-type name="Type" />
      </object-type>

      <object-type name="Attribute">
        <include file-name="smtk/view/Attribute.h" location="local"/>
        <add-function signature="ToBase(const smtk::shared_ptr&lt;smtk::view::Attribute &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::view::Base &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::view::Base &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="Group">
        <include file-name="smtk/view/Group.h" location="local"/>
        <add-function signature="ToBase(const smtk::shared_ptr&lt;smtk::view::Group &gt;)"
          static="yes"
          return-type="smtk::shared_ptr&lt;smtk::view::Base &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::view::Base &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="ModelEntity">
        <include file-name="smtk/view/ModelEntity.h" location="local"/>
        <add-function signature="ToBase(const smtk::shared_ptr&lt;smtk::view::ModelEntity &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::view::Base &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::view::Base &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="Root">
        <include file-name="smtk/view/Root.h" location="local"/>
        <add-function signature="ToBase(const smtk::shared_ptr&lt;smtk::view::Root &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::view::Base &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::view::Base &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>

        <modify-function signature="setInvalidColor(const double *)" remove="all"/>

        <modify-function signature="setDefaultColor(const double *)" remove="all"/>
      </object-type>

      <object-type name="SimpleExpression">
        <include file-name="smtk/view/SimpleExpression.h" location="local"/>
        <add-function signature="ToBase(const smtk::shared_ptr&lt;smtk::view::SimpleExpression &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::view::Base &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::view::Base &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

      <object-type name="Instanced">
        <include file-name="smtk/view/Instanced.h" location="local"/>
        <add-function signature="ToBase(const smtk::shared_ptr&lt;smtk::view::Instanced &gt;)"
                      static="yes"
                      return-type="smtk::shared_ptr&lt;smtk::view::Base &gt;">
          <inject-code>
            %RETURN_TYPE %0 = smtk::dynamic_pointer_cast&lt;smtk::view::Base &gt;(%1);
            %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
          </inject-code>
        </add-function>
      </object-type>

    </namespace-type>


  </namespace-type>

  @EXTRA_OBJECTS@

</typesystem>

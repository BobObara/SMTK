/*=========================================================================

Copyright (c) 1998-2012 Kitware Inc. 28 Corporate Drive,
Clifton Park, NY, 12065, USA.

All rights reserved. No part of this software may be reproduced, distributed,
or modified, in any form or by any means, without permission in writing from
Kitware Inc.

IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES THEREOF,
EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
INCLUDING,
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE IS PROVIDED ON AN
"AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO
PROVIDE
MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
=========================================================================*/
// .NAME PublicPointerDefs.h -
// .SECTION Description
// .SECTION See Also

#ifndef __slctk_attribute_PublicPointerDefs_h
#define __slctk_attribute_PublicPointerDefs_h

@POINTER_TYPE_HEADERS@

namespace slctk
{
  template <typename T, typename U>
  inline @POINTER_NAMESPACE@::shared_ptr<T> dynamicCastPointer(const @POINTER_NAMESPACE@::shared_ptr<U> &r)
  {
    return @POINTER_NAMESPACE@::dynamic_pointer_cast<T>(r);
  }

  namespace attribute
  {
    class Attribute;
    class AttributeSection;
    class AttributeRefItem;
    class AttributeRefItemDefinition;
    class Definition;
    class DirectoryItem;
    class DirectoryItemDefinition;
    class DoubleItem;
    class DoubleItemDefinition;
    class FileItem;
    class FileItemDefinition;
    class GroupItem;
    class GroupItemDefinition;
    class GroupSection;
    class InstancedSection;
    class IntItem;
    class IntItemDefinition;
    class Item;
    class ItemDefinition;
    class Manager;
    class ModelEntitySection;
    class RootSection;
    class Section;
    class SimpleExpressionSection;
    class StringItem;
    class StringItemDefinition;
    class ValueItem;
    class ValueItemDefinition;
    class VoidItem;
    class VoidItemDefinition;
  };

  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::Attribute> AttributePtr;
  typedef @POINTER_NAMESPACE@::weak_ptr<attribute::Attribute> WeakAttributePtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::Definition> AttributeDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<const attribute::Definition> ConstAttributeDefinitionPtr;
  typedef @POINTER_NAMESPACE@::weak_ptr<attribute::Definition> WeakAttributeDefinitionPtr;

  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::AttributeRefItem> AttributeRefItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::AttributeRefItemDefinition> AttributeRefItemDefinitionPtr;

  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::Item> AttributeItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<const attribute::Item> ConstAttributeItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::ItemDefinition> AttributeItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<const attribute::ItemDefinition> ConstAttributeItemDefinitionPtr;

  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::ValueItem> ValueItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::ValueItemDefinition> ValueItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::DirectoryItem> DirectoryItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::DirectoryItemDefinition> DirectoryItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::DoubleItem> DoubleItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::DoubleItemDefinition> DoubleItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::FileItem> FileItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::FileItemDefinition> FileItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::GroupItem> GroupItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::GroupItemDefinition> GroupItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::IntItem> IntItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::IntItemDefinition> IntItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::StringItem> StringItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::StringItemDefinition> StringItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::VoidItem> VoidItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::VoidItemDefinition> VoidItemDefinitionPtr;

  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::Manager> AttributeManagerPtr;

  // Section Related Pointer Classes
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::Section> SectionPtr;
  typedef @POINTER_NAMESPACE@::weak_ptr<attribute::Section> WeakSectionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::AttributeSection> AttributeSectionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::GroupSection> GroupSectionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::InstancedSection> InstancedSectionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::ModelEntitySection> ModelEntitySectionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::RootSection> RootSectionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::SimpleExpressionSection> SimpleExpressionSectionPtr;

/*
  template<typename T>
  struct shared_ptr_type
  {
    typedef @POINTER_NAMESPACE@::shared_ptr<T> type;
  };
*/

  // These are used internally by SLCTK
  namespace internal
  {
    template <typename T>
    struct is_shared_ptr
    {
      enum {type=false};
    };
    template<typename T>
    struct is_shared_ptr<@POINTER_NAMESPACE@::shared_ptr<T> >
    {
      enum{type=true};
    };
    
    template<typename T, int Enabled = is_shared_ptr<T>::type >
    struct shared_ptr_type
    {
      typedef @POINTER_NAMESPACE@::shared_ptr<T> SharedPointerType;
      typedef T RawPointerType;
    };
    
    template<typename T>
    struct shared_ptr_type<T,true>
    {
      typedef T SharedPointerType;
      typedef typename T::element_type RawPointerType;
    };
  };
};
#endif /* __slctk_attribute_PublicPointerDefs_h */

/*=========================================================================

Copyright (c) 1998-2012 Kitware Inc. 28 Corporate Drive,
Clifton Park, NY, 12065, USA.

All rights reserved. No part of this software may be reproduced, distributed,
or modified, in any form or by any means, without permission in writing from
Kitware Inc.

IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES THEREOF,
EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
INCLUDING,
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE IS PROVIDED ON AN
"AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO
PROVIDE
MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
=========================================================================*/
// .NAME PublicPointerDefs.h -
// .SECTION Description
// .SECTION See Also

#ifndef __slctk_attribute_PublicPointerDefs_h
#define __slctk_attribute_PublicPointerDefs_h

@POINTER_TYPE_HEADERS@

namespace slctk
{
  template <typename T, typename U>
  inline @POINTER_NAMESPACE@::shared_ptr<T> dynamicCastPointer(const @POINTER_NAMESPACE@::shared_ptr<U> &r)
  {
    return @POINTER_NAMESPACE@::dynamic_pointer_cast<T>(r);
  }

  namespace attribute
  {
    class Attribute;
    class AttributeReferenceItem;
    class AttributeReferenceItemDefinition;
    class Definition;
    class Cluster;
    class Item;
    class ItemDefinition;
    class DoubleItem;
    class DoubleItemDefinition;
    class GroupItem;
    class GroupItemDefinition;
    class IntegerItem;
    class IntegerItemDefinition;
    class Manager;
    class StringItem;
    class StringItemDefinition;
    class ValueItem;
    class ValueItemDefinition;
  };

  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::Attribute> AttributePtr;
  typedef @POINTER_NAMESPACE@::weak_ptr<attribute::Attribute> WeakAttributePtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::Definition> AttributeDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<const attribute::Definition> ConstAttributeDefinitionPtr;
  typedef @POINTER_NAMESPACE@::weak_ptr<attribute::Definition> WeakAttributeDefinitionPtr;

  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::AttributeReferenceItem> AttributeReferenceItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::AttributeReferenceItemDefinition> AttributeReferenceItemDefinitionPtr;

  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::Cluster> AttributeClusterPtr;
  typedef @POINTER_NAMESPACE@::weak_ptr<attribute::Cluster> WeakAttributeClusterPtr;

  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::Item> AttributeItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<const attribute::Item> ConstAttributeItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::ItemDefinition> AttributeItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<const attribute::ItemDefinition> ConstAttributeItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::ValueItem> ValueItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::DoubleItem> DoubleItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::DoubleItemDefinition> DoubleItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::IntegerItem> IntegerItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::IntegerItemDefinition> IntegerItemDefinitionPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::StringItem> StringItemPtr;
  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::StringItemDefinition> StringItemDefinitionPtr;

  typedef @POINTER_NAMESPACE@::shared_ptr<attribute::Manager> AttributeManagerPtr;

/*
  template<typename T>
  struct shared_ptr_type
  {
    typedef @POINTER_NAMESPACE@::shared_ptr<T> type;
  };
*/

  template <typename T>
  struct is_shared_ptr
  {
    enum {type=false};
  };
  template<typename T>
  struct is_shared_ptr<@POINTER_NAMESPACE@::shared_ptr<T> >
  {
    enum{type=true};
  };

  template<typename T, int Enabled = is_shared_ptr<T>::type >
  struct shared_ptr_type
  {
    typedef @POINTER_NAMESPACE@::shared_ptr<T> type;
    typedef T T_Type;
  };

template<typename T>
 struct shared_ptr_type<T,true>
  {
    typedef T type;
    typedef typename T::element_type T_Type;
  };

};
#endif /* __slctk_attribute_PublicPointerDefs_h */
